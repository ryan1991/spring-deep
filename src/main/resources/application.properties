#spring.datasource.url=jdbc:mysql://localhost:3306/test
#spring.datasource.username=root
#spring.datasource.password=123456
#spring.datasource.driver-class-name=com.mysql.jdbc.Driver

#spring.cloud.sentinel.transport.dashboard=localhost:8080
#spring.cloud.sentinel.eager=false

server.port=8090
spring.application.name=boot2-deep

myconfig.name = ls
myconfig.age=10

example.name = ww
example.age=20

mybatis.mapper-locations=classpath:mybatis.mappers/*.xml

spring.kafka.bootstrap-servers=localhost:9092

dubbo.application.name=boot2-deep
#dubbo.protocol.name=dubbo
#dubbo.registry.address=zookeeper://127.0.0.1:2181

#dubbo.registry.address=nacos://localhost:8848
#dubbo.registry.publish-interface=false
#dubbo.registry.publish-instance=false
#dubbo.application.publish-instance=false


dubbo.registries.zk.address=zookeeper://localhost:2181
dubbo.registries.nacos.address=nacos://localhost:8848
#dubbo.registry.publish-instance=false
#注册模型 接口纬度
#dubbo.registry.publish-interface=true
#dubbo.registries.nacos.publish-instance=false
#dubbo.registries.nacos.publish-interface=false

#dubbo.application.publish-interface=false



#此为多协议的key，在@DubboService注解中指定时指定此key值
dubbo.protocols.tri.name=tri
dubbo.protocols.tri.port=-1
#dubbo.protocols.tri.serialization=protobuf
dubbo.protocols.dubbo.name=dubbo
dubbo.protocols.dubbo.port=-1

# 内存模式，元数据保存在当前进程中
spring.shardingsphere.mode.type=Memory
spring.shardingsphere.datasource.names=test,ds0,ds1
spring.shardingsphere.datasource.test.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.test.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.test.jdbc-url=jdbc:mysql://localhost:3306/test?useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8
spring.shardingsphere.datasource.test.username=root
spring.shardingsphere.datasource.test.password=123456


spring.shardingsphere.datasource.ds0.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.ds0.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.ds0.jdbc-url=jdbc:mysql://localhost:3306/ds0?useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8
spring.shardingsphere.datasource.ds0.username=root
spring.shardingsphere.datasource.ds0.password=123456

spring.shardingsphere.datasource.ds1.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.ds1.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.ds1.jdbc-url=jdbc:mysql://localhost:3306/ds1?useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8
spring.shardingsphere.datasource.ds1.username=root
spring.shardingsphere.datasource.ds1.password=123456


spring.shardingsphere.rules.sharding.tables.t_order.actual-data-nodes=ds$->{0..1}.t_order$->{0..3}
spring.shardingsphere.rules.sharding.tables.t_order.key-generate-strategy.column=id
spring.shardingsphere.rules.sharding.tables.t_order.key-generate-strategy.key-generator-name=alg_snowflake
##t_order分库分表策略
spring.shardingsphere.rules.sharding.tables.t_order.database-strategy.standard.sharding-column=user_id
spring.shardingsphere.rules.sharding.tables.t_order.database-strategy.standard.sharding-algorithm-name=user-id-inline
spring.shardingsphere.rules.sharding.tables.t_order.table-strategy.standard.sharding-column=order_id
spring.shardingsphere.rules.sharding.tables.t_order.table-strategy.standard.sharding-algorithm-name=order-id-inline

spring.shardingsphere.rules.sharding.sharding-algorithms.user-id-inline.type=INLINE
spring.shardingsphere.rules.sharding.sharding-algorithms.user-id-inline.props.algorithm-expression=ds$->{user_id % 2}



spring.shardingsphere.rules.sharding.sharding-algorithms.order-id-inline.type=INLINE
spring.shardingsphere.rules.sharding.sharding-algorithms.order-id-inline.props.algorithm-expression=t_order$->{order_id %4}



spring.shardingsphere.rules.sharding.tables.t_order_item.actual-data-nodes=ds$->{0..1}.t_order_item$->{0..7}
spring.shardingsphere.rules.sharding.tables.t_order_item.key-generate-strategy.column=id
spring.shardingsphere.rules.sharding.tables.t_order_item.key-generate-strategy.key-generator-name=alg_snowflake
##t_order_item分库分表策略
spring.shardingsphere.rules.sharding.tables.t_order_item.database-strategy.standard.sharding-column=user_id
spring.shardingsphere.rules.sharding.tables.t_order_item.database-strategy.standard.sharding-algorithm-name=user-id-inline
spring.shardingsphere.rules.sharding.tables.t_order_item.table-strategy.standard.sharding-column=order_id
spring.shardingsphere.rules.sharding.tables.t_order_item.table-strategy.standard.sharding-algorithm-name=item-order-id-inline

spring.shardingsphere.rules.sharding.sharding-algorithms.item-order-id-inline.type=INLINE
spring.shardingsphere.rules.sharding.sharding-algorithms.item-order-id-inline.props.algorithm-expression=t_order_item$->{order_id %8}


#主键生成算法
spring.shardingsphere.rules.sharding.key-generators.alg_snowflake.type=SNOWFLAKE

#绑定表
spring.shardingsphere.rules.sharding.binding-tables=t_order,t_order_item
spring.shardingsphere.props.sql-show=true


mybatis.configuration.map-underscore-to-camel-case=true


#nacos
nacos.config.bootstrap.enable=true
nacos.config.server-addr=127.0.0.1:8848
nacos.config.data-id=boot2-deep
nacos.config.group=DEFAULT_GROUP


nacos.config.type=properties
# 主配置 最大重试次数
nacos.config.max-retry=10
# 主配置 开启自动刷新
nacos.config.auto-refresh=true
# 主配置 重试时间
nacos.config.config-retry-time=2333
# 主配置 配置监听长轮询超时时间
nacos.config.config-long-poll-timeout=46000


#注册中心
nacos.discovery.server-addr=127.0.0.1:8848

